{"ast":null,"code":"var _jsxFileName = \"/Users/apapoutsis/Documents/Projects/GitHub/Counter-Tutorial/counterApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Buffer } from \"buffer\";\nimport algosdk from \"algosdk\";\nimport approval from \"./contracts/approval\";\nimport clear from \"./contracts/clear\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst creatorMnemonic = \"spell cry quit border inflict drastic worry butter hip obey since coffee stage speak alcohol excess six blur ticket stand party fury kite above choose\";\nconst userMnemonic = \"wall outdoor there pipe senior exotic reunion memory federal trouble dinner dwarf any shoot finish universe deputy citizen ski dragon direct wait steak above dial\"; // user declared algod connection parameters\n\nconst algodAddress = \"http://localhost:4001\";\nconst algodServer = \"http://localhost\";\nconst algodPort = 4001;\nconst algodToken = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"; // declare application state storage (immutable)\n\nconst localInts = 1;\nconst localBytes = 1;\nconst globalInts = 1;\nconst globalBytes = 1; // user declared approval program (refactored)\n\nlet approvalProgramSourceRefactored = approval; // declare clear state program source\n\nlet clearProgramSource = clear;\nlet algodClient;\nlet creatorAccount;\nlet userAccount;\nlet approvalProgram;\nlet clearProgram;\nlet appId;\nlet appInc = [];\nlet appDec = [];\n\nfunction App() {\n  _s();\n\n  const [counter, setCounter] = useState([0]); // helper function to compile program source\n\n  async function compileProgram(client, programSource) {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await client.compile(programBytes).do();\n    let compiledBytes = new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n    return compiledBytes;\n  } // helper function to await transaction confirmation\n  // Function used to wait for a tx confirmation\n\n\n  const waitForConfirmation = async function (algodclient, txId) {\n    let status = await algodclient.status().do();\n    let lastRound = status[\"last-round\"];\n\n    while (true) {\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n        break;\n      }\n\n      lastRound++;\n      await algodclient.statusAfterBlock(lastRound).do();\n    }\n  }; // create new application\n\n\n  async function createApp(client, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes) {\n    // define sender as creator\n    let sender = creatorAccount.addr; // declare onComplete as NoOp\n\n    let onComplete = algosdk.OnApplicationComplete.NoOpOC; // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction\n\n    let txn = algosdk.makeApplicationCreateTxn(sender, params, onComplete, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n    let txId = txn.txID().toString(); // Sign the transaction\n\n    let signedTxn = txn.signTxn(creatorAccount.sk);\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse[\"application-index\"];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n  } // call application\n\n\n  async function callApp(client, account, index, appArgs) {\n    // define sender\n    let sender = account.addr; // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction\n\n    let txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs);\n    let txId = txn.txID().toString(); // Sign the transaction\n\n    let signedTxn = txn.signTxn(account.sk);\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    console.log(\"Called app-id:\", transactionResponse[\"txn\"][\"txn\"][\"apid\"]);\n\n    if (transactionResponse[\"global-state-delta\"] !== undefined) {\n      console.log(\"Global State updated:\", transactionResponse[\"global-state-delta\"]);\n      setCounter(transactionResponse[\"global-state-delta\"]);\n    }\n\n    if (transactionResponse[\"local-state-delta\"] !== undefined) {\n      console.log(\"Local State updated:\", transactionResponse[\"local-state-delta\"]);\n    }\n  } // read global state of application\n\n\n  async function readGlobalState(client, account, index) {\n    let accountInfoResponse = await client.accountInformation(account.addr).do();\n\n    for (let i = 0; i < accountInfoResponse[\"created-apps\"].length; i++) {\n      if (accountInfoResponse[\"created-apps\"][i].id === index) {\n        console.log(\"Application's global state:\");\n\n        for (let n = 0; n < accountInfoResponse[\"created-apps\"][i][\"params\"][\"global-state\"].length; n++) {\n          console.log(accountInfoResponse[\"created-apps\"][i][\"params\"][\"global-state\"][n]);\n        }\n      }\n    }\n  }\n\n  async function deleteApp(client, creatorAccount, index) {\n    // define sender as creator\n    let sender = creatorAccount.addr; // get node suggested parameters\n\n    let params = await client.getTransactionParams().do(); // comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // create unsigned transaction\n\n    let txn = algosdk.makeApplicationDeleteTxn(sender, params, index);\n    let txId = txn.txID().toString(); // Sign the transaction\n\n    let signedTxn = txn.signTxn(creatorAccount.sk);\n    console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n    await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n    await waitForConfirmation(client, txId); // display results\n\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n    console.log(\"Deleted app-id: \", appId);\n    return appId;\n  }\n\n  async function createApplication() {\n    try {\n      // initialize an algodClient\n      algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort); // get accounts from mnemonic\n\n      creatorAccount = algosdk.mnemonicToSecretKey(creatorMnemonic);\n      userAccount = algosdk.mnemonicToSecretKey(userMnemonic); // compile programs\n\n      approvalProgram = await compileProgram(algodClient, approvalProgramSourceRefactored);\n      clearProgram = await compileProgram(algodClient, clearProgramSource); // create new application\n\n      appId = await createApp(algodClient, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n    } catch (err) {\n      console.log(\"err\", err);\n    }\n  }\n\n  async function increment() {\n    appInc.push(new Uint8Array(Buffer.from(\"add\"))); //Replace add with minus to subtract.. MUST ADD FIRST, cant have negative number\n\n    await callApp(algodClient, userAccount, appId, appInc);\n    await readGlobalState(algodClient, userAccount, appId);\n  }\n\n  async function decrement() {\n    appDec.push(new Uint8Array(Buffer.from(\"minus\"))); //Replace add with minus to subtract.. MUST ADD FIRST, cant have negative number\n\n    await callApp(algodClient, userAccount, appId, appDec);\n    await readGlobalState(algodClient, userAccount, appId);\n  }\n\n  async function endApplication() {\n    await deleteApp(algodClient, creatorAccount, appId);\n    setCounter([0]);\n  }\n\n  function getCount() {\n    alert(\"The current count is\" + JSON.stringify(counter));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Algorand Counter Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: counter.map((count, index) => JSON.stringify(count.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => createApplication(),\n        children: \"Create Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => decrement(),\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => getCount(),\n        children: [\" \", \"Count\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => increment(),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => endApplication(),\n        children: \"End Application\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"3JtfLkWDSzEz2Ixauc7rXvKX+A4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/apapoutsis/Documents/Projects/GitHub/Counter-Tutorial/counterApp/src/App.js"],"names":["React","useState","Buffer","algosdk","approval","clear","creatorMnemonic","userMnemonic","algodAddress","algodServer","algodPort","algodToken","localInts","localBytes","globalInts","globalBytes","approvalProgramSourceRefactored","clearProgramSource","algodClient","creatorAccount","userAccount","approvalProgram","clearProgram","appId","appInc","appDec","App","counter","setCounter","compileProgram","client","programSource","encoder","TextEncoder","programBytes","encode","compileResponse","compile","do","compiledBytes","Uint8Array","from","result","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","console","log","statusAfterBlock","createApp","sender","addr","onComplete","OnApplicationComplete","NoOpOC","params","getTransactionParams","fee","flatFee","txn","makeApplicationCreateTxn","txID","toString","signedTxn","signTxn","sk","sendRawTransaction","transactionResponse","callApp","account","index","appArgs","makeApplicationNoOpTxn","undefined","readGlobalState","accountInfoResponse","accountInformation","i","length","id","n","deleteApp","makeApplicationDeleteTxn","apid","createApplication","Algodv2","mnemonicToSecretKey","err","increment","push","decrement","endApplication","getCount","alert","JSON","stringify","map","count","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Buffer } from \"buffer\";\nimport algosdk from \"algosdk\";\nimport approval from \"./contracts/approval\";\nimport clear from \"./contracts/clear\";\n\nconst creatorMnemonic =\n\t\"spell cry quit border inflict drastic worry butter hip obey since coffee stage speak alcohol excess six blur ticket stand party fury kite above choose\";\nconst userMnemonic =\n\t\"wall outdoor there pipe senior exotic reunion memory federal trouble dinner dwarf any shoot finish universe deputy citizen ski dragon direct wait steak above dial\";\n\n// user declared algod connection parameters\nconst algodAddress = \"http://localhost:4001\";\nconst algodServer = \"http://localhost\";\nconst algodPort = 4001;\nconst algodToken = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n\n// declare application state storage (immutable)\nconst localInts = 1;\nconst localBytes = 1;\nconst globalInts = 1;\nconst globalBytes = 1;\n\n// user declared approval program (refactored)\nlet approvalProgramSourceRefactored = approval;\n\n// declare clear state program source\nlet clearProgramSource = clear;\n\nlet algodClient;\nlet creatorAccount;\nlet userAccount;\nlet approvalProgram;\nlet clearProgram;\nlet appId;\nlet appInc = [];\nlet appDec = [];\n\nfunction App() {\n\tconst [counter, setCounter] = useState([0]);\n\n\t// helper function to compile program source\n\tasync function compileProgram(client, programSource) {\n\t\tlet encoder = new TextEncoder();\n\t\tlet programBytes = encoder.encode(programSource);\n\t\tlet compileResponse = await client.compile(programBytes).do();\n\t\tlet compiledBytes = new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n\t\treturn compiledBytes;\n\t}\n\n\t// helper function to await transaction confirmation\n\t// Function used to wait for a tx confirmation\n\tconst waitForConfirmation = async function (algodclient, txId) {\n\t\tlet status = await algodclient.status().do();\n\t\tlet lastRound = status[\"last-round\"];\n\t\twhile (true) {\n\t\t\tconst pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\t\t\tif (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n\t\t\t\t//Got the completed Transaction\n\t\t\t\tconsole.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastRound++;\n\t\t\tawait algodclient.statusAfterBlock(lastRound).do();\n\t\t}\n\t};\n\n\t// create new application\n\tasync function createApp(client, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes) {\n\t\t// define sender as creator\n\t\tlet sender = creatorAccount.addr;\n\t\t// declare onComplete as NoOp\n\t\tlet onComplete = algosdk.OnApplicationComplete.NoOpOC;\n\n\t\t// get node suggested parameters\n\t\tlet params = await client.getTransactionParams().do();\n\t\t// comment out the next two lines to use suggested fee\n\t\tparams.fee = 1000;\n\t\tparams.flatFee = true;\n\n\t\t// create unsigned transaction\n\t\tlet txn = algosdk.makeApplicationCreateTxn(sender, params, onComplete, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n\t\tlet txId = txn.txID().toString();\n\n\t\t// Sign the transaction\n\t\tlet signedTxn = txn.signTxn(creatorAccount.sk);\n\t\tconsole.log(\"Signed transaction with txID: %s\", txId);\n\n\t\t// Submit the transaction\n\t\tawait client.sendRawTransaction(signedTxn).do();\n\t\t// Wait for confirmation\n\t\tawait waitForConfirmation(client, txId);\n\n\t\t// display results\n\t\tlet transactionResponse = await client.pendingTransactionInformation(txId).do();\n\t\tlet appId = transactionResponse[\"application-index\"];\n\t\tconsole.log(\"Created new app-id: \", appId);\n\t\treturn appId;\n\t}\n\n\t// call application\n\tasync function callApp(client, account, index, appArgs) {\n\t\t// define sender\n\t\tlet sender = account.addr;\n\n\t\t// get node suggested parameters\n\t\tlet params = await client.getTransactionParams().do();\n\t\t// comment out the next two lines to use suggested fee\n\t\tparams.fee = 1000;\n\t\tparams.flatFee = true;\n\n\t\t// create unsigned transaction\n\t\tlet txn = algosdk.makeApplicationNoOpTxn(sender, params, index, appArgs);\n\t\tlet txId = txn.txID().toString();\n\n\t\t// Sign the transaction\n\t\tlet signedTxn = txn.signTxn(account.sk);\n\t\tconsole.log(\"Signed transaction with txID: %s\", txId);\n\n\t\t// Submit the transaction\n\t\tawait client.sendRawTransaction(signedTxn).do();\n\n\t\t// Wait for confirmation\n\t\tawait waitForConfirmation(client, txId);\n\n\t\t// display results\n\t\tlet transactionResponse = await client.pendingTransactionInformation(txId).do();\n\t\tconsole.log(\"Called app-id:\", transactionResponse[\"txn\"][\"txn\"][\"apid\"]);\n\t\tif (transactionResponse[\"global-state-delta\"] !== undefined) {\n\t\t\tconsole.log(\"Global State updated:\", transactionResponse[\"global-state-delta\"]);\n\t\t\tsetCounter(transactionResponse[\"global-state-delta\"]);\n\t\t}\n\t\tif (transactionResponse[\"local-state-delta\"] !== undefined) {\n\t\t\tconsole.log(\"Local State updated:\", transactionResponse[\"local-state-delta\"]);\n\t\t}\n\t}\n\n\t// read global state of application\n\tasync function readGlobalState(client, account, index) {\n\t\tlet accountInfoResponse = await client.accountInformation(account.addr).do();\n\t\tfor (let i = 0; i < accountInfoResponse[\"created-apps\"].length; i++) {\n\t\t\tif (accountInfoResponse[\"created-apps\"][i].id === index) {\n\t\t\t\tconsole.log(\"Application's global state:\");\n\t\t\t\tfor (let n = 0; n < accountInfoResponse[\"created-apps\"][i][\"params\"][\"global-state\"].length; n++) {\n\t\t\t\t\tconsole.log(accountInfoResponse[\"created-apps\"][i][\"params\"][\"global-state\"][n]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync function deleteApp(client, creatorAccount, index) {\n\t\t// define sender as creator\n\t\tlet sender = creatorAccount.addr;\n\n\t\t// get node suggested parameters\n\t\tlet params = await client.getTransactionParams().do();\n\t\t// comment out the next two lines to use suggested fee\n\t\tparams.fee = 1000;\n\t\tparams.flatFee = true;\n\n\t\t// create unsigned transaction\n\t\tlet txn = algosdk.makeApplicationDeleteTxn(sender, params, index);\n\t\tlet txId = txn.txID().toString();\n\n\t\t// Sign the transaction\n\t\tlet signedTxn = txn.signTxn(creatorAccount.sk);\n\t\tconsole.log(\"Signed transaction with txID: %s\", txId);\n\n\t\t// Submit the transaction\n\t\tawait client.sendRawTransaction(signedTxn).do();\n\n\t\t// Wait for confirmation\n\t\tawait waitForConfirmation(client, txId);\n\n\t\t// display results\n\t\tlet transactionResponse = await client.pendingTransactionInformation(txId).do();\n\t\tlet appId = transactionResponse[\"txn\"][\"txn\"].apid;\n\t\tconsole.log(\"Deleted app-id: \", appId);\n\t\treturn appId;\n\t}\n\n\tasync function createApplication() {\n\t\ttry {\n\t\t\t// initialize an algodClient\n\t\t\talgodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort);\n\n\t\t\t// get accounts from mnemonic\n\t\t\tcreatorAccount = algosdk.mnemonicToSecretKey(creatorMnemonic);\n\t\t\tuserAccount = algosdk.mnemonicToSecretKey(userMnemonic);\n\n\t\t\t// compile programs\n\t\t\tapprovalProgram = await compileProgram(algodClient, approvalProgramSourceRefactored);\n\t\t\tclearProgram = await compileProgram(algodClient, clearProgramSource);\n\n\t\t\t// create new application\n\t\t\tappId = await createApp(algodClient, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n\t\t} catch (err) {\n\t\t\tconsole.log(\"err\", err);\n\t\t}\n\t}\n\n\tasync function increment() {\n\t\tappInc.push(new Uint8Array(Buffer.from(\"add\"))); //Replace add with minus to subtract.. MUST ADD FIRST, cant have negative number\n\t\tawait callApp(algodClient, userAccount, appId, appInc);\n\t\tawait readGlobalState(algodClient, userAccount, appId);\n\t}\n\n\tasync function decrement() {\n\t\tappDec.push(new Uint8Array(Buffer.from(\"minus\"))); //Replace add with minus to subtract.. MUST ADD FIRST, cant have negative number\n\t\tawait callApp(algodClient, userAccount, appId, appDec);\n\t\tawait readGlobalState(algodClient, userAccount, appId);\n\t}\n\n\tasync function endApplication() {\n\t\tawait deleteApp(algodClient, creatorAccount, appId);\n\t\tsetCounter([0]);\n\t}\n\n\tfunction getCount() {\n\t\talert(\"The current count is\" + JSON.stringify(counter));\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<h1>Algorand Counter Application</h1>\n\t\t\t\t<div className=\"text\">{counter.map((count, index) => JSON.stringify(count.value))}</div>\n\t\t\t\t<button className=\"btn\" onClick={() => createApplication()}>\n\t\t\t\t\tCreate Application\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={() => decrement()}>\n\t\t\t\t\tDecrement\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={() => getCount()}>\n\t\t\t\t\t{\" \"}\n\t\t\t\t\tCount\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={() => increment()}>\n\t\t\t\t\tIncrement\n\t\t\t\t</button>\n\t\t\t\t<button className=\"btn\" onClick={() => endApplication()}>\n\t\t\t\t\tEnd Application\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}